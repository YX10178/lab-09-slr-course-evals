library(tidyverse)
library(tidymodels)
library(tidyverse)
install (tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
library(tidymodels)
library(tidyverse)
install.packages("tidymodels", dependencies = TRUE)
library(tidymodels)
library(tidyverse)
library(tidymodels)
#library(tidyverse)
#library(tidymodels)
#library(openintro)
library(tidyverse)
library(broom)
library(openintro)
?evals
data(evals)
data(evals)
View(evals)
View(evals)
data(evals)
ggplot (evals, aes (x=score))+
geom_line
data(evals)
ggplot(evals, aes(x = score)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Course Evaluation Scores",
x = "Score",
y = "Count") +
theme_minimal()
#library(tidyverse)
#library(tidymodels)
#library(openintro)
library(tidyverse)
library(broom)
library(openintro)
data(evals)
ggplot(evals, aes(x = score)) +
geom_histogram(binwidth = 0.25, fill = "steelblue", color = "black", alpha = 0.7) +
labs(title = "Distribution of Course Evaluation Scores",
x = "Score",
y = "Count") +
theme_minimal()
summary(evals$score)
# the relationship between score and the variable bty_avg, a professorâ€™s average beauty rating.
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_point(alpha = 0.5, color = "steelblue") +  # Scatter points
geom_smooth(method = "lm", color = "red", se = TRUE) +  # Regression line
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating (bty_avg)",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(width = 0.2, height = 0.2, alpha = 0.5, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(width = 0.2, height = 0.5, alpha = 0.5, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(width = 0.2, height = 0.1, alpha = 0.5, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter( color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.5, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.3, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#"The jitter geom is a convenient shortcut for geom_point(position = "jitter"). It adds a small amount of random variation to the location of each point."
#"is a useful way of handling overplotting"
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.4, color = "steelblue") +
geom_smooth(method = "lm", color = "red", se = TRUE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
#linear regression model
m_bty<-lm(score~bty_avg, data=evals)
#linear regression model
m_bty<-lm(score~bty_avg, data=evals)
summary (m_bty)
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.4, color = "steelblue") +
geom_abline(intercept =3.88,slope = 0.07, color = "orange", se = FALSE) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.4, color = "steelblue") +
geom_abline(intercept =3.88,slope = 0.07, color = "orange", linewidth = 2) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
ggplot(evals, aes(x = bty_avg, y = score)) +
geom_jitter(alpha = 0.4, color = "steelblue") +
geom_abline(intercept =3.88,slope = 0.07, color = "orange", linewidth = 1.5) +
labs(title = "Relationship Between Beauty Rating and Course Score",
x = "Professor's Average Beauty Rating",
y = "Course Evaluation Score") +
theme_minimal()
summary(m_bty)$r.squared
m_gen<-lm(score~gender, data=evals)
summary (m_gen)
summary (gender)
summary (evals$gender)
m_gen<-lm(score~gender, data=evals)
summary (m_gen)
#intercept 4.09
#slope 0.14
# score  = 0.14 gender + 4.09
#
levels(evals$gender)
m_rank<-lm(score~rank, data=evals)
summary (m_rank)
summary (rank)
summary (evals$rank)
m_rank<-lm(score~rank, data=evals)
summary (m_rank)
#intercept 4.28
#slope for tenure track -0.13
#slope for tenured  -0.15
# score  = -0.15 tenured + (-0.13) tenuretrack + 4.28
# on average, teaching professors receive a course evaluation score of 4.09.
# on avgerage, male professors (genderMale = 1) receive scores that are 0.14 points higher than female professors.
summary (evals$rank)
m_rank<-lm(score~rank, data=evals)
summary (m_rank)
#intercept 4.28
#slope for tenure track -0.13
#slope for tenured  -0.15
# expected score  = -0.15 tenured + (-0.13) tenuretrack + 4.28
# on average, teaching professors receive a course evaluation score of 4.28.
# on avgerage, tenured professors have an expected evaluation score of 4.13.
# on avgerage, tenure-track professors have an expected evaluation score of 4.15.
#Create a new variable called rank_relevel where "tenure track" is the baseline level.
## Hint
#For Exercise 12, the `relevel()` function can be helpful!
rank_relevel<-relevel(evals$rank, ref = "tenure track")
m_rank_relevel<-lm(score~rank_relevel, data=evals)
summary (m_rank_relevel)
m_rank_relevel<-lm(score~rank_relevel, data=evals)
summary (m_rank_relevel)
#intercept 4.15
#slope for teaching professor 0.13
#slope for tenured  -0.02
# expected score  = -0.02 tenured + 0.13 teaching + 4.15
# on average, teaching professors receive a course evaluation score of 4.15+0.13=4.28.
# on avgerage, tenured professors have an expected evaluation score of 4.15-0.02=4.13.
# on avgerage, tenure-track professors have an expected evaluation score of 4.15.
summary(m_rank_relevel)$r.squared
#
evals <- evals %>%
mutate(tenure_eligible = ifelse(rank == "teaching", "no", "yes"))
m_tenure_eligible<-lm(score~tenure_eligible, data=evals)
summary (m_tenure_eligible)
m_tenure_eligible<-lm(score~tenure_eligible, data=evals)
summary (m_tenure_eligible)
#intercept 4.15
#slope for teaching professor 0.13
#slope for tenured  -0.02
# expected score  = -0.02 tenured + 0.13 teaching + 4.15
# on average, teaching professors receive a course evaluation score of 4.15+0.13=4.28.
# on avgerage, tenured professors have an expected evaluation score of 4.15-0.02=4.13.
# on avgerage, tenure-track professors have an expected evaluation score of 4.15.
summary(m_tenure_eligible)$r.squared
# r.squared = 0.01
# only 1% of the variability in course evaluation scores is explained by professor rank (tenured, teaching, tenure-track).
